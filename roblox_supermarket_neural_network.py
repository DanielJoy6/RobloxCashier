# -*- coding: utf-8 -*-
"""Roblox SuperMarket Neural Network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IcKsoCmsqWHFuyZ-aRYwlkTHk5bQLkGT
"""

from PIL import Image
import numpy as np
import os
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.losses import SparseCategoricalCrossentropy
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
import zipfile

#Extract all files from zip file
with zipfile.ZipFile('/content/Images.zip', 'r') as zip_ref:
        zip_ref.extractall('/content/')
#set up file arrays
y = []
x = []

#Loop through files, encode based on if cash or card, then resize
for filename in os.listdir('Images'):
    if("card" in filename):
        y.append(0)
    elif("cash" in filename):
        y.append(1)
    image_path = os.path.join('Images', filename)
    with Image.open(image_path) as img:
        img = img.convert('RGB')
        img = img.resize((100, 125))
        img_array = np.array(img).astype('float32')
        x.append(img_array)
x =  np.array(x)
y = np.array(y, dtype=np.int32)

print(f'Loaded {len(x)} images.')

#Make in format that CNN understands
y = to_categorical(y, num_classes=2)

#Define CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(125, 100, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(2, activation='softmax')
])
early_stopping = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(x, y, epochs=20, batch_size=len(x), callbacks=[], verbose=1)

#Optional plots if you'd like to look at loss & accuracy over time
'''plt.plot(history.history['loss'], label='Training Loss', color='blue')
#plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.legend()
plt.title("Loss")
plt.show()

plt.plot(history.history['accuracy'], label='Training Accuracy', color='blue')
#plt.plot(history.history['val_accuracy'], label='Validation Accuracy', color='orange')
plt.legend()
plt.title("Accuracy")
plt.show()
'''

#Save as .keras file for portability
model.save('cardorcash.keras')


#Redo the same thing with digit recognition. Extract all files from zip
with zipfile.ZipFile('/content/Images2.zip', 'r') as zip_ref:
        zip_ref.extractall('/content/')
y = []
x = []
#Loop through files and apply labels
for filename in os.listdir('Images2'):
    if("zero" in filename):
        y.append(0)
    elif("one" in filename):
        y.append(1)
    elif "two" in filename:
        y.append(2)
    elif "three" in filename:
        y.append(3)
    elif "four" in filename:
        y.append(4)
    elif "five" in filename:
        y.append(5)
    elif "six" in filename:
        y.append(6)
    elif "seven" in filename:
        y.append(7)
    elif "eight" in filename:
        y.append(8)
    elif "nine" in filename:
        y.append(9)
    elif "dollar" in filename:
        y.append(10)
    image_path = os.path.join('Images2', filename)
    #Prepare files for neural network by converting and resizing
    with Image.open(image_path) as img:
        img = img.convert('RGB')
        img = img.resize((100, 125))
        img_array = np.array(img).astype('float32')
        x.append(img_array)
x =  np.array(x)
y = np.array(y, dtype=np.int32)


print(f'Loaded {len(x)} images.')
y = to_categorical(y, num_classes=11)

#Define CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(125, 100, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(11, activation='softmax')
])
early_stopping = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(x, y, epochs=20, batch_size=len(x), callbacks=[], verbose=1)
#Optional plots to view loss & accuracy over time
'''plt.plot(history.history['loss'], label='Training Loss', color='blue')
plt.legend()
plt.title("Loss")
plt.show()

plt.plot(history.history['accuracy'], label='Training Accuracy', color='blue')
plt.legend()
plt.title("Accuracy")
plt.show()'''

#Save finalized model
model.save('handwritingNN.keras')
